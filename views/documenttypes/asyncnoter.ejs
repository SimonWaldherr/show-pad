<% layout('../doc.ejs') %>
<% block('title', docname) -%>

<!-- PWP -->
<% pwppath = "/pwp/podlove-web-player-master/podlove-web-player"; %>

<% script(pwppath + '/static/podlove-web-player.js') %>
<% stylesheet(pwppath + '/static/podlove-web-player.css') %>

<!-- ShareJS -->
<% script('/sharejs/channel/bcsocket.js') %>
<% script('/sharejs/share.uncompressed.js') %>
<% script('/sharejs/json.uncompressed.js') %>

<% script('/jwerty/jwerty.js') %>

<div id="flashwarning" class="alert alert-warn hidden"><%-__('asyncnoter.flashwarning')%></div>
<center>
    <audio id="asyncnoterPlayer">
        <source src="http://meta.metaebene.me/media/lautsprecher/ls000-der-lautsprecher.m4a" type='audio/mp4' />
        <source src="http://meta.metaebene.me/media/lautsprecher/ls000-der-lautsprecher.oga" type='audio/ogg; codecs="vorbis"' />
        <source src="http://meta.metaebene.me/media/lautsprecher/ls000-der-lautsprecher.mp3" type='audio/mpeg' />
    </audio>
    <hr>
    <div id="addnotes" class="form-horizontal">
        <span>Add a note:</span>
        <span id="addnotetime">&nbsp;</span>
        <input id="addnotetext" type="text">
        <button class="btn" id="addnote">Add!</button>
    </div>
</center>

<br>
<div id="err" class="alert alert-error hidden"></div>
<div id="notes"></div>

<script>
// arch
var webplayer
  , doc
  , isFlash = false

// add notes
var isInNote = false
  , inNoteTime

$(function()
{
    setupWebplayer();
    setupSharejs();
    setupUI();
    setupKeybindings();
});

function setupWebplayer()
{
    $('#asyncnoterPlayer').podlovewebplayer(
        {
            title: 'ShowPad!',
            permalink: '#',
            subtitle: '',
            chapters: [],
            summary: '<p></p>',
            downloads: [],
            duration: '',
            startVolume: 1,
            width: '500px',
            poster: '',
            pluginPath: '<%=pwppath%>/static/',
            summaryVisible: false,
            alwaysShowHours: true,
            timecontrolsVisible: false,
            sharebuttonsVisible: false,
            chaptersVisible: false
        }
    );

    webplayer = $('#asyncnoterPlayer')[0];

    if(!webplayer.setCurrentTime)
    {
        $('#flashwarning').removeClass('hidden');
        isFlash = true;
    }
}

function setupSharejs()
{
    var options =
    {
        origin: '/sharejs/sock_bc',
        authentication: "<%=authtoken%>"
    }

    sharejs.open("<%=docname%>", 'json', options,
        function (error, _doc)
        {
            doc = _doc;

            var notes = doc.get();
            $.each(notes, function(i, note) { addNoteToHTML(note); });
            doc.at().on('insert', onDocInsert);
        }
    );
}

function setupUI()
{
    $('#addnotetext').on('input', function ()
    {
        var $text = $('#addnotetext');
        if($text.val().length == 0)
        {
            isInNote = false;
            setAddnotetimeSpan('');
        }
        else if(!isInNote)
        {
            userSetNoteTime();
        }
    });

    $('#addnote').click(userSubmitNote);
    $('#addnotetext').keypress(function (e)
    {
        if((e.keyCode ? e.keyCode : e.which) == 13) userSubmitNote();
    });
}

function setupKeybindings()
{
    jwerty.key('ctrl+space', userPauseOrStart);
    jwerty.key('ctrl+e', userSetNoteTime);

    if(!isFlash)
    {
        jwerty.key('ctrl+w', userJumpForward);
        jwerty.key('ctrl+q', userJumpBackward);
    }
}

function userPauseOrStart()
{
    if(webplayer.paused)
    {
        webplayer.play();
    }
    else
    {
        webplayer.pause();
    }
}

function userSetNoteTime()
{
    isInNote = true;
    inNoteTime = getCurrentTime();
    setAddnotetimeSpan(inNoteTime);
}

function userJumpForward()
{
    userJump(+60);
}

function userJumpBackward()
{
    userJump(-60);
}

function userJump(amount)
{
    webplayer.setCurrentTime(webplayer.currentTime + amount);
}

function userSubmitNote()
{
    var text = $('#addnotetext').val();
    if(text && text.length != 0)
    {
        userAddNote(text);
    }
}

function userClickNote(e)
{
    var $note;
    if(e.target.tagName.toUpperCase() == "LI")
    {
        $note = $(e.target);
    }
    else
    {
        $note = $(e.target).parent("li");
    }

    var time = $note.attr("data-time");
    webplayer.setCurrentTime(time);
}

function onDocInsert(position, note)
{
    addNoteToHTML(note);
}

function userAddNote(text)
{
    isInNote = false;
    setAddnotetimeSpan('');
    $('#addnotetext').val('');

    addNoteToDoc({ time: inNoteTime, text: text });

    $('#addnotetext').focus();
}

var errorTimeout;

function addNoteToDoc(note)
{
    doc.at().push(note,
        function (err, op)
        {
            if(err)
            {
                clearTimeout(errorTimeout);
                setTimeout(function () { $('#err').addClass('hidden') }, 5000);
                $('#err').text(err).removeClass('hidden');
            }
            else
            {
                addNoteToHTML(note);
            }
        }
    );
}

function addNoteToHTML(note)
{
    var $notes = $('#notes li');
    var position = -1;

    var $note = $('<li>');
    $note.attr('data-time', note.time);
    $note.append($('<span>').addClass('time').text(note.time));
    $note.append($('<span>').addClass('text').text(note.text));
    
    if(!isFlash)
    {
        // jumping to the notes time does not work in the flash
        // version because setCurrentTime doesn't.
        $note.click(userClickNote);
    }

    for (var i = 0; i < $notes.length; i++)
    {
        if($($notes[i]).data('time') > note.time)
        {
            position = i;
            break;
        }
    }

    if(position == -1)
    {
        $('#notes').append($note);
    }
    else
    {
        $('#notes li').eq(position).before($note);
    }
}

function setAddnotetimeSpan(text)
{
    if(text.length == 0)
    {
        $('#addnotetime').html('&nbsp;');
    }
    else
    {
        $('#addnotetime').text(text);
    }
}

// webplayer.currentTime does not work in the flash-version of mediaelement.js
// so we have to squeeze the current time out of the HTML element which contains it..
function getCurrentTime()
{
    var rawTime = $('.podlovewebplayer_wrapper .mejs-currenttime').text().split(':');
    var time = 0;
    // hours are optional.. so here comes the magic!
    for(var i = rawTime.length - 1; i >= 0; i--)
    {
        time += parseInt(rawTime[i], 10) * Math.pow(60, rawTime.length - i - 1);
    }
    return time;
}
</script>
