<% layout('../doc.ejs') %>
<% block('title', docname) -%>

<!-- PWP -->
<% pwppath = "/pwp/podlove-web-player-master/podlove-web-player"; %>

<% script(pwppath + '/static/podlove-web-player.js') %>
<% stylesheet(pwppath + '/static/podlove-web-player.css') %>

<% script('/jwerty/jwerty.js') %>
<% script('/js/jquery.scrollTo-min.js') %>
<% script('/js/list.min.js') %>
<% script('/js/osftools.js') %>
<% script('/js/async.js') %>
<% script('/js/asyncnoter_share.js') %>

<div style="display: hidden; height: 10px; clear: both;"></div>
<div id="flashwarning" class="alert alert-warn hidden topwarning"><%-__('asyncnoter.flashwarning')%></div>
<div id="sourcewarning" class="alert alert-warn hidden topwarning"><%-__('asyncnoter.sourcewarning')%></div>

<center style="clear: both">
    <div id="toprow">
        <div class="col fixed">
        </div>
        <div class="col">
            <audio id="asyncnoterPlayer">
                <% for(media in mediaurls) { %>
                <source src="<%- mediaurls[media].url %>" type='<%- mediatypes[media] %>' />
                <% } %>
            </audio>
        </div>
        <div id="userlist_wrapper" class="col fixed">
            <%= __('asyncnoter.onlineusers') %>
            <div id="userlist">
                <ul class="list">
                </ul>
            </div>
        </div>
    </div>
</center>
<hr>
<div id="editnote" class="form-horizontal">
    <span></span>
    <span class="time">&nbsp;</span>
    <input class="time" style="display: none" type="text">
    <input class="text" type="text">
    <button class="btn submit"></button>
</div>

<br>
<div id="err" class="alert alert-error hidden"></div>
<div id="notes"></div>

<script>
// do this in js because 100% in CSS is the full page height and bla
function fixNotesHeight() { $('#notes').css('height', ($(window).height() - 450) + 'px'); }
fixNotesHeight();
$(window).resize(fixNotesHeight);

// arch
var webplayer
  , isFlash = false
  , scrollInterval
  , editMode = "add"
  , userlist
  , connectors = asyncnoterconnectors
  , connector = null

// add notes
var isInNote = false
  , inNoteTime

// edit notes
var editingNote

// jQuery
var $editnotetime     = $('#editnote > .time')
  , $editnotetimespan = $editnotetime.filter("span")
  , $editnotetimetxt  = $editnotetime.filter("input")
  , $editnotetext     = $('#editnote > .text:first')
  , $editnotesubmit   = $('#editnote > .submit:first')

$(function()
{
    async.series(
        [
            setupConnector,
            setupWebplayer,
            setupUI,
            setupUserlist,
            setupKeybindings,
            setupScrolling
        ]
    );
});


/* Setup Functions */
function setupConnector(cb)
{
    var options = {};
    var docname = "<%=docname%>";
    var connectorName = Object.keys(connectors)[0];

    connector = connectors[connectorName];

    if(connectorName == "share")
    {
        options =
        {
            origin: '<%=pageurl%>sharejs/sock_bc',
            authentication: "<%=authtoken%>"
        }
    }

    async.waterfall(
        [
            function (cb)
            {
                connector.start(docname, options, cb);
            },
            function (cb)
            {
                connector.addEventReceiver("noteAdded", connectorNoteAdded);
                connector.addEventReceiver("noteRemoved", connectorNoteRemoved);
                connector.addEventReceiver("noteEdited", connectorNoteEdited);
                connector.getNotes(cb);
            },
            function (notes, cb)
            {
                $.each(notes, addNoteToHTML);
                cb();
            }
        ],
        cb
    );
}

function setupWebplayer(cb)
{
    $('#asyncnoterPlayer').podlovewebplayer(
        {
            title: 'ShowPad!',
            permalink: '<%=pageurl%>doc/<%=docname%>',
            subtitle: '',
            chapters: [],
            summary: '<p></p>',
            downloads: [],
            duration: '',
            startVolume: 1,
            width: '500px',
            poster: '',
            pluginPath: '<%=pwppath%>/static/',
            summaryVisible: false,
            alwaysShowHours: true,
            timecontrolsVisible: false,
            sharebuttonsVisible: false,
            chaptersVisible: false
        }
    );

    webplayer = $('#asyncnoterPlayer')[0];

    if(!webplayer.setCurrentTime)
    {
        $('#flashwarning').removeClass('hidden');
        isFlash = true;
    }
    else if(webplayer.src == "")
    {
        $('#sourcewarning').removeClass('hidden');
    }

    cb();
}

function setupUI(cb)
{
    $editnotetext.on('input', function ()
    {
        if($editnotetext.val().length == 0)
        {
            isInNote = false;
            setAddnotetimeSpan('');
        }
        else if(!isInNote)
        {
            userSetNoteTime();
        }
    });

    $editnotesubmit.click(userSubmitNote);
    $editnotetext.keyup(function (e)
    {
        var isEnter = (e.keyCode ? e.keyCode : e.which) == 13;
        var isEsc = (e.keyCode ? e.keyCode : e.which) == 27;

        if(isEnter)
            userSubmitNote();
        else if(isEsc && editMode == "edit")
            userAbortEdit();
    });

    $editnotetimespan.click(
        function ()
        {
            editNoteTimeSpan();
        }
    );

    $editnotetimetxt.keypress(function (e)
    {
        if((e.keyCode ? e.keyCode : e.which) == 13) endEditNoteTimeSpan();
    });

    $editnotetimetxt.focusout(function (e)
    {
        if($editnotetimetxt.is(":visible"))
            endEditNoteTimeSpan();
    });

    setControlMode("add");

    cb();
}

function setupUserlist(cb)
{
    var options =
    {
        item: '<li><span class="username"></span>&nbsp;(<span class="type"></span>) <span class="time"></span></li>'
    };

    userlist = new List('userlist', options);
    userlist.sort('username');

    setTimeout(function () { setInterval(postUserList, 1500) }, 500);
    setInterval(getUserList, 1500);

    getUserList();

    cb();

    function postUserList()
    {
        var data =
        {
            time: getCurrentTime(),
            playing: !webplayer.paused
        };

        $.post('/async/onlineusers/<%=docname%>', data);
    }

    function getUserList()
    {
        $.getJSON('/async/onlineusers/<%=docname%>',
            function (data)
            {
                var historicalUsers = getHistoricalUsers();
                var users = {};

                for (var i = 0; i < data.users.length; i++)
                {
                    var username = data.users[i].username;
                    var time = data.users[i].time;

                    var userData =
                    {
                        type: "online",
                        time: osftools.toHumanTime(time)
                    };

                    users[username] = userData;
                }

                for (var i = 0; i < historicalUsers.length; i++)
                {
                    if(!users[historicalUsers[i]])
                        users[historicalUsers[i]] = { type: "historical" };
                }

                var usernames = Object.keys(users);

                for (var username in users)
                {
                    var user = users[username];
                    user.username = username;
                    user.id = username;

                    userlist.remove("username", username);
                    userlist.add(user);

                    $(userlist.get("username", username).elm).find('.time').click(clickUserTime);
                }

                for (var i = 0; i < userlist.items.length; i++)
                {
                    var username = $(userlist.items[i].elm).find('.username').text();
                    
                    if(usernames.indexOf(username) == -1)
                    {
                        userlist.remove("username", username);
                    }
                }
            }
        )
    }

    function clickUserTime(e)
    {
        var $time = $(e.target);
        var time = osftools.fromHumanTime($time.text());

        setCurrentTime(time);
        webplayer.play();
    }
}

function setupKeybindings(cb)
{
    jwerty.key('ctrl+space', userPauseOrStart);
    jwerty.key('ctrl+e', userSetNoteTime);

    if(!isFlash)
    {
        jwerty.key('ctrl+w', userJumpForward);
        jwerty.key('ctrl+q', userJumpBackward);
    }
    
    cb();
}

function setupScrolling(cb)
{
    if(webplayer.currentSrc == "")
        return;

    var lastTime = null;

    scrollInterval = setInterval(function ()
    {
        var time = getCurrentTime();
        var $notes = $('#notes');

        if(lastTime == time)
            return;

        connector.getNotes(
            function (err, notes)
            {
                for (var i = 0; i < notes.length; i++)
                {
                    if((i == notes.length - 1) || notes[i + 1].time > time)
                    {
                        var $currentNote = $notes.find('li.note[data-index=' + i + ']');
                        var $prevNote;

                        if(i == 0)
                        {
                            $prevNote = $currentNote;
                        }
                        else
                        {
                            $prevNote = $currentNote.siblings('li.note').eq($currentNote.index() - 1);
                        }

                        $notes.scrollTo($prevNote, 800);
                        $notes.find('li.note').removeClass("active");
                        $currentNote.addClass("active");
                        break;
                    }
                }

                lastTime = time;
            }
        );
    }, 1500);
    
    cb();
}


/* Connector Events */

function connectorNoteAdded(index, note)
{
    addNoteToHTML(index, note);
}

function connectorNoteRemoved(index, note)
{
    if(editMode == "edit")
    {
        if(editingNote > index)
            editingNote--;
        else if(editingNote == index)
            userAbortEdit();
    }

    removeNoteFromHTML(index);
}

function connectorNoteEdited(index, note, changes)
{
    var changedKeys = Object.keys(changes);
    var $note = getHTMLNote(index);

    for (var i = 0; i < changedKeys.length; i++)
    {
        var key = changedKeys[i];

        switch(key)
        {
            case "text":
                setHTMLNoteText($note, changes[key]);
                break;
            case "time":
                setHTMLNoteTime($note, changes[key]);
                break;
        }
    }
}


/* User Functions */

function userPauseOrStart()
{
    if(webplayer.paused)
    {
        webplayer.play();
    }
    else
    {
        webplayer.pause();
    }
}

function userSetNoteTime()
{
    isInNote = true;
    inNoteTime = getCurrentTime();
    setAddnotetimeSpan(osftools.toHumanTime(inNoteTime));
}

function userJumpForward()
{
    userJump(+60);
}

function userJumpBackward()
{
    userJump(-60);
}

function userJump(amount)
{
    setCurrentTime(getCurrentTime() + amount);
}

function userSubmitNote()
{
    var text = $editnotetext.val() || "";

    if(editMode == "add" && text.length != 0)
    {
        userAddNote(text);
    }
    else if(editMode == "edit")
    {
        var index = editingNote;

        if(text.length == 0)
        {
            removeNote(index);
        }
        else
        {
            userFinishEditNote();
        }
    }

}

function userAddNote(text)
{
    isInNote = false;
    setAddnotetimeSpan('');
    $editnotetext.val('');

    connector.addNote({ time: inNoteTime, text: text },
            function (err)
            {
                if(err)
                {
                    clearTimeout(errorTimeout);
                    errorTimeout = setTimeout(function () { $('#err').addClass('hidden') }, 5000);
                    $('#err').text(err).removeClass('hidden');
                }
            }
    );

    $editnotetext.focus();
}

function userFinishEditNote()
{
    var text = $editnotetext.val() || "";
    var time = inNoteTime;

    connector.editNote(editingNote, { time: time, text: text },
            function (err)
            {
                if(err)
                {

                }
                else
                {
                    setAddnotetimeSpan('');
                    $editnotetext.val('');
                    setControlMode("add");
                }
            }
    );
}

function userDeleteNote(e)
{
    var $note = getNoteFromChild(e.target);
    var index = $note.attr('data-index');

    removeNote(index);
}

function userEditNote(e)
{
    var $note = getNoteFromChild(e.target);
    var index = $note.attr('data-index');

    connector.getNote(index,
            function (err, note)
            {
                setControlMode("edit");
                editingNote = index;
                isInNote = true;
                inNoteTime = note.time;

                resetNoteTimespan();
                setAddnotetimeSpan(osftools.toHumanTime(note.time));
                $editnotetext.val(note.text);
                $editnotetext.focus();

                var bracketPos = note.text.indexOf("<>");

                if(bracketPos != -1) // empty link, jump between the brackets
                {
                    $editnotetext.selectRange(bracketPos + 1, bracketPos + 1);
                }
            }
    );
}

function userAbortEdit()
{
    setControlMode("add");
}

function editNoteTimeSpan()
{
    $editnotetimetxt.val($editnotetimespan.text());
    $editnotetime.toggle();
    $editnotetimetxt.focus();
}

function endEditNoteTimeSpan()
{
    var val = jQuery.trim($editnotetimetxt.val());
    var time = osftools.fromHumanTime(val);

    if(time != false)
    {
        inNoteTime = time;
        setAddnotetimeSpan(osftools.toHumanTime(inNoteTime));
    }

    $editnotetime.toggle();
}

function removeNote(index)
{
    connector.removeNote(index,
            function (err)
            {
                if(err)
                {
                    clearTimeout(errorTimeout);
                    errorTimeout = setTimeout(function () { $('#err').addClass('hidden') }, 5000);
                    $('#err').text(err).removeClass('hidden');
                }
                else
                {
                    if(editMode == "edit")
                    {
                        if(editingNote > index)
                            editingNote--;
                        else if(editingNote == index)
                            userAbortEdit();
                    }
                }
            }
    );
}

function userClickNote(e)
{
    var $note = getNoteFromChild(e.target);
    var index = $note.attr('data-index');

    connector.getNote(index,
            function (err, note)
            {
                var time = note.time;
                setCurrentTime(time);
            }
    );
}


/* Note-HTML Functions */

function getNoteFromChild(child)
{
    var $note;
    if(child.tagName.toUpperCase() == "LI")
    {
        $note = $(child);
    }
    else
    {
        $note = $(child).parents("li:first");
    }
    return $note;
}

function addNoteToHTML(index, note)
{
    var $notes = $('#notes li.note');
    var position = -1;

    var $note = $('<li>');
    $note.attr('data-index', index);
    $note.addClass('note');
    $note.append($('<span>').addClass('time'));
    $note.append($('<span>').addClass('text'));

    setHTMLNoteTime($note, note.time);
    setHTMLNoteText($note, note.text);

    var $btns = $('<div>');
    $btns.addClass("btns");
    $btns.append($('<span>').addClass('delete notebtn pull-right').html("&#10008;").click(userDeleteNote));
    $btns.append($('<span>').addClass('edit notebtn pull-right').html("&#9998;").click(userEditNote));

    $note.append($btns);

    if(note.text.indexOf("<>") != -1) // empty link
    {
        $note.addClass("missinglink");
    }

    if(!isFlash)
    {
        // jumping to the notes time does not work in the flash
        // version because setCurrentTime doesn't.
        $note.find('.time').click(userClickNote);
    }

    connector.getNotes(
            function (err, notes)
            {
                for (var i = 0; i < $notes.length; i++)
                {
                    var currentIndex = $($notes[i]).attr('data-index');
                    var currentNote = notes[currentIndex];

                    if(currentNote.time > note.time ||
                            currentNote.time == note.time && currentIndex > index)
                    {
                        position = i;
                        break;
                    }
                }

                if(position == -1)
                {
                    $('#notes').append($note);
                }
                else
                {
                    $notes.eq(position).before($note);
                }
            }
    );
}

function setHTMLNoteTime($note, time)
{
    $note.find('.time').text(osftools.toHumanTime(time));
}

function setHTMLNoteText($note, text)
{
    var $text = $note.find('.text');

    var linkStartIndex = text.indexOf("<");
    var linkEndIndex = text.indexOf(">", linkStartIndex);

    if(linkStartIndex != -1 && linkEndIndex != -1)
    {
        linkStartIndex += 1;

        var link = text.substr(linkStartIndex, linkEndIndex - linkStartIndex);
        var $link = $('<a>').attr('href', link).text(link);

        $text.append(document.createTextNode(text.substr(0, linkStartIndex)));
        $text.append($link);
        $text.append(document.createTextNode(text.substr(linkEndIndex)));
    }
    else
    {
        $text.text(text);
    }
}

function removeNoteFromHTML(index)
{
    getHTMLNote(index).remove();

    $("#notes li.note").each(
            function (i, elem)
            {
                var $elem = $(elem);
                var noteIndex = $elem.attr('data-index');

                if(parseInt(noteIndex, 10) > index)
                {
                    $elem.attr('data-index', noteIndex - 1);
                }
            }
    );
}

function getHTMLNote(index)
{
    return $("#notes li.note[data-index=" + index + "]");
}


/* Edit/Add-HTML Functions */

function setControlMode(mode)
{
    editMode = mode;

    var modes =
    {
        add:
        {
            pretext: "<%-__('asyncnoter.controls.add.txt')%>",
            btntext: "<%-__('asyncnoter.controls.add.btn')%>"
        },
        edit:
        {
            pretext: "<%-__('asyncnoter.controls.edit.txt')%>",
            btntext: "<%-__('asyncnoter.controls.edit.btn')%>"
        }
    };

    var texts = modes[mode];

    $('#editnote > span:first').text(texts.pretext);
    $editnotesubmit.text(texts.btntext);
}

function setAddnotetimeSpan(text)
{
    if(text.length == 0)
    {
        $editnotetimespan.html('&nbsp;');
    }
    else
    {
        $editnotetimespan.text(text);
    }
}

function resetNoteTimespan()
{
    $editnotetimespan.show();
    $editnotetimetxt.hide();
}


/* Player Functions */

function setCurrentTime(time)
{
    webplayer.setCurrentTime(time);
}

function getCurrentTime()
{
    // webplayer.currentTime does not work in the flash-version of mediaelement.js
    // so we have to squeeze the current time out of the HTML element which contains it..

    var rawTime = $('.podlovewebplayer_wrapper .mejs-currenttime').text().split(':');
    var time = 0;
    // hours are optional.. so here comes the magic!
    for(var i = rawTime.length - 1; i >= 0; i--)
    {
        time += parseInt(rawTime[i], 10) * Math.pow(60, rawTime.length - i - 1);
    }
    return time;
}

function getHistoricalUsers()
{
    return [];

    //if(!doc)
    //    return [];

    var meta = doc.at("meta").get();
    var users = {};

    for (var i = 0; i < meta.length; i++)
    {
        var m = meta[i];
        var metaUsers = Object.keys(m.editors).concat(m.creator);

        for (var j = 0; j < metaUsers.length; j++)
        {
            var metaUser = metaUsers[j];
            users[metaUser] = (users[metaUser] || 0) + 1;
        }
    }

    return Object.keys(users);
}


/* Utilities */

// http://stackoverflow.com/a/841121/2486196
$.fn.selectRange = function(start, end) {
    if(!end) end = start;
    return this.each(function() {
        if (this.setSelectionRange) {
            this.focus();
            this.setSelectionRange(start, end);
        } else if (this.createTextRange) {
            var range = this.createTextRange();
            range.collapse(true);
            range.moveEnd('character', end);
            range.moveStart('character', start);
            range.select();
        }
    });
};
</script>
