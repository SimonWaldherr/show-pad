<% layout('../doc.ejs') %>
<% block('title', docname) -%>

<!-- PWP -->
<% pwppath = "/pwp/podlove-web-player-master/podlove-web-player"; %>

<% script(pwppath + '/static/podlove-web-player.js') %>
<% stylesheet(pwppath + '/static/podlove-web-player.css') %>

<!-- ShareJS -->
<% script('/sharejs/channel/bcsocket.js') %>
<% script('/sharejs/share.uncompressed.js') %>
<% script('/sharejs/json.uncompressed.js') %>

<% script('/jwerty/jwerty.js') %>
<% script('/js/jquery.scrollTo-min.js') %>

<div id="flashwarning" class="alert alert-warn hidden"><%-__('asyncnoter.flashwarning')%></div>
<center>
    <audio id="asyncnoterPlayer">
<% for(media in mediaurls) { %>
        <source src="<%- mediaurls[media].url %>" type='<%- mediatypes[media] %>' />
<% } %>
    </audio>
    <hr>
    <div id="editnote" class="form-horizontal">
        <span><%-__('asyncnoter.addnote.txt')%></span>
        <span class="time">&nbsp;</span>
        <input class="time" style="display: none" type="text">
        <input class="text" type="text">
        <button class="btn submit"><%-__('asyncnoter.addnote.btn')%></button>
    </div>
</center>

<br>
<div id="err" class="alert alert-error hidden"></div>
<div id="notes"></div>

<script>
// do this in js because 100% in CSS is the full page height and bla
function fixNotesHeight() { $('#notes').css('height', ($(window).height() - 450) + 'px'); }
fixNotesHeight();
$(window).resize(fixNotesHeight);

// arch
var webplayer
  , doc
  , isFlash = false
  , scrollInterval
  , editMode = "add"

// add notes
var isInNote = false
  , inNoteTime

// edit notes
var editingNote

// jQuery
var $editnotetime     = $('#editnote > .time')
  , $editnotetimespan = $editnotetime.filter("span")
  , $editnotetimetxt  = $editnotetime.filter("input")
  , $editnotetext     = $('#editnote > .text:first')
  , $editnotesubmit   = $('#editnote > .submit:first')

$(function()
{
    setupWebplayer();
    setupSharejs();
    setupUI();
    setupKeybindings();
    setupScrolling();
});

function setupWebplayer()
{
    $('#asyncnoterPlayer').podlovewebplayer(
        {
            title: 'ShowPad!',
            permalink: '<%=pageurl%>doc/<%=docname%>',
            subtitle: '',
            chapters: [],
            summary: '<p></p>',
            downloads: [],
            duration: '',
            startVolume: 1,
            width: '500px',
            poster: '',
            pluginPath: '<%=pwppath%>/static/',
            summaryVisible: false,
            alwaysShowHours: true,
            timecontrolsVisible: false,
            sharebuttonsVisible: false,
            chaptersVisible: false
        }
    );

    webplayer = $('#asyncnoterPlayer')[0];

    if(!webplayer.setCurrentTime)
    {
        $('#flashwarning').removeClass('hidden');
        isFlash = true;
    }
}

function setupSharejs()
{
    var options =
    {
        origin: '<%=pageurl%>sharejs/sock_bc',
        authentication: "<%=authtoken%>"
    }

    sharejs.open("<%=docname%>", 'json', options,
        function (error, _doc)
        {
            doc = _doc;

            var notes = getNotes();
            $.each(notes, addNoteToHTML);
            doc.at("notes").on('insert', onDocInsert);
            doc.at("notes").on('delete', onDocDelete);
            doc.at("notes").on('child op', onNoteChildOp);
        }
    );
}

function setupUI()
{
    $editnotetext.on('input', function ()
    {
        if($editnotetext.val().length == 0)
        {
            isInNote = false;
            setAddnotetimeSpan('');
        }
        else if(!isInNote)
        {
            userSetNoteTime();
        }
    });

    $editnotesubmit.click(userSubmitNote);
    $editnotetext.keypress(function (e)
    {
        if((e.keyCode ? e.keyCode : e.which) == 13) userSubmitNote();
    });

    $editnotetimespan.click(
        function ()
        {
            editNoteTimeSpan();
        }
    );

    $editnotetimetxt.keypress(function (e)
    {
        if((e.keyCode ? e.keyCode : e.which) == 13) endEditNoteTimeSpan();
    });

    $editnotetimetxt.focusout(function (e)
    {
        endEditNoteTimeSpan();
    });
}

function setupKeybindings()
{
    jwerty.key('ctrl+space', userPauseOrStart);
    jwerty.key('ctrl+e', userSetNoteTime);

    if(!isFlash)
    {
        jwerty.key('ctrl+w', userJumpForward);
        jwerty.key('ctrl+q', userJumpBackward);
    }
}

function setupScrolling()
{
    var lastTime = null;

    scrollInterval = setInterval(function ()
    {
        var time = getCurrentTime();

        if(lastTime == time)
            return;

        var notes = getNotes();
        var $notes = $('#notes');

        for (var i = 0; i < notes.length; i++)
        {
            if((i == notes.length - 1) || notes[i + 1].time > time)
            {
                var $currentNote = $notes.find('li.note[data-index=' + i + ']');
                var $prevNote;

                if(i == 0)
                {
                    $prevNote = $currentNote;
                }
                else
                {
                    $prevNote = $currentNote.siblings('li.note').eq($currentNote.index() - 1);
                }

                $notes.scrollTo($prevNote, 800);
                $notes.find('li.note').css('background-color', '');
                $currentNote.css('background-color', 'rgba(255,255,0,0.2)');
                $currentNote.css('opactiy', "0.2");
                break;
            }
        }

        lastTime = time;
    }, 1500);
}

function userPauseOrStart()
{
    if(webplayer.paused)
    {
        webplayer.play();
    }
    else
    {
        webplayer.pause();
    }
}

function userSetNoteTime()
{
    isInNote = true;
    inNoteTime = getCurrentTime();
    setAddnotetimeSpan(getHumanTime(inNoteTime));
}

function userJumpForward()
{
    userJump(+60);
}

function userJumpBackward()
{
    userJump(-60);
}

function userJump(amount)
{
    webplayer.setCurrentTime(webplayer.currentTime + amount);
}

function userSubmitNote()
{
    var text = $editnotetext.val() || "";

    if(editMode == "add")
    {
        if(text.length != 0)
        {
            userAddNote(text);
        }
    }
    else if(editMode == "edit")
    {
        var index = editingNote;

        if(text.length == 0)
        {
            removeNoteFromDoc(index);
        }
        else
        {
            userFinishEditNote();
        }
    }

}

function userClickNote(e)
{
    var $note = getNoteFromChild(e.target);
    var index = $note.attr('data-index');

    var time = getNotes()[index].time;
    webplayer.setCurrentTime(time);
}

function getNoteFromChild(child)
{
    var $note;
    if(child.tagName.toUpperCase() == "LI")
    {
        $note = $(child);
    }
    else
    {
        $note = $(child).parent("li");
    }
    return $note;
}

function onDocInsert(position, note)
{
    addNoteToHTML(position, note);
}

function onDocDelete(position, note)
{
    removeNoteFromHTML(position);
}

function onNoteChildOp(path, op)
{
    var index = path[0];
    var newVal = op.oi;
    var $note = $('li.note[data-index=' + index + ']');

    switch(path[1])
    {
        case "time":
            removeNoteFromHTML(index);
            addNoteToHTML(index, getNotes()[index]);
            break;

        case "text":
            $note.find('.text').text(newVal);
            break;
    }
}

function userAddNote(text)
{
    isInNote = false;
    setAddnotetimeSpan('');
    $editnotetext.val('');

    addNoteToDoc({ time: inNoteTime, text: text });

    $editnotetext.focus();
}

function userDeleteNote(e)
{
    var $note = getNoteFromChild(e.target);
    var index = $note.attr('data-index');

    removeNoteFromDoc(index);
}

function userEditNote(e)
{
    var $note = getNoteFromChild(e.target);
    var index = $note.attr('data-index');
    var note = getNotes()[index];

    editMode = "edit";
    editingNote = index;
    isInNote = true;
    inNoteTime = note.time;

    resetNoteTimespan();
    setAddnotetimeSpan(getHumanTime(note.time));
    $editnotetext.val(note.text);
}

function userFinishEditNote()
{
    var text = $editnotetext.val() || "";
    setNoteDoc(editingNote, { time: inNoteTime, text: text });

    setAddnotetimeSpan('');
    $editnotetext.val('');
    editMode = "add";
}

var errorTimeout;

function addNoteToDoc(note)
{
    doc.at("notes").push(note,
        function (err, op)
        {
            if(err)
            {
                clearTimeout(errorTimeout);
                errorTimeout = setTimeout(function () { $('#err').addClass('hidden') }, 5000);
                $('#err').text(err).removeClass('hidden');
            }
            else
            {
                addNoteToHTML(op[0].p[1], note);
            }
        }
    );
}

function removeNoteFromDoc(index)
{
    removeNoteFromHTML(index);
    doc.at(["notes", index]).remove(
            function (err, op)
            {
                if(err)
                {
                    clearTimeout(errorTimeout);
                    errorTimeout = setTimeout(function () { $('#err').addClass('hidden') }, 5000);
                    $('#err').text(err).removeClass('hidden');
                }
                else
                {
                    if(editingNote > index)
                        editingNote--;

                    $("#notes li.note").each(
                            function (i, elem)
                            {
                                var $elem = $(elem);
                                var elemIndex = $elem.attr('data-index');

                                if(elemIndex > index)
                                {
                                    $elem.attr('data-index', elemIndex - 1);
                                }
                            }
                    )
                }
            }
    );
}

function setNoteDoc(index, note)
{
    var oldnote = getNotes()[index];
    var keys = getKeys(oldnote, note);

    for (var i = 0; i < keys.length; i++)
    {
        var key = keys[i];

        if(oldnote[key] != note[key])
        {
            doc.at(["notes", index, key]).set(note[key],
                    function (err, op)
                    {
                        if(err)
                        {

                        }
                        else
                        {
                            onNoteChildOp(op[0].p.slice(1), op[0]);
                        }
                    }
            );
        }
    }
}

function getKeys()
{
    var keys = [];

    for (var i = 0; i < arguments.length; i++)
    {
        var arg = arguments[i];
        var argKeys = Object.keys(arg);

        for (var j = 0; j < argKeys.length; j++)
        {
            var argKey = argKeys[j];

            if(keys.indexOf(argKey) == -1)
                keys.push(argKey);
        }
    }

    return keys;
}

function addNoteToHTML(index, note)
{
    var $notes = $('#notes li.note');
    var position = -1;

    var $note = $('<li>');
    $note.attr('data-index', index);
    $note.addClass('note');
    $note.append($('<span>').addClass('time').text(getHumanTime(note.time)));
    $note.append($('<span>').addClass('text').text(note.text));
    $note.append($('<span>').addClass('delete notebtn pull-right').html("&#10008;").click(userDeleteNote));
    $note.append($('<span>').addClass('edit notebtn pull-right').html("&#9998;").click(userEditNote));

    if(!isFlash)
    {
        // jumping to the notes time does not work in the flash
        // version because setCurrentTime doesn't.
        $note.click(userClickNote);
    }

    for (var i = 0; i < $notes.length; i++)
    {
        var currentIndex = $($notes[i]).attr('data-index');
        var currentNote = getNotes()[currentIndex];

        if(currentNote.time > note.time ||
           currentNote.time == note.time && currentIndex > index)
        {
            position = i;
            break;
        }
    }

    if(position == -1)
    {
        $('#notes').append($note);
    }
    else
    {
        $notes.eq(position).before($note);
    }
}

function getHumanTime(time)
{
    var seconds = pad(time % 60, 2);
    var minutes = pad(Math.floor((time / 60) % 60), 2);
    var hours = pad(Math.floor((time / 60 / 60) % 60), 2);

    return hours + ":" + minutes + ":" + seconds;

    // http://stackoverflow.com/a/10073788
    function pad(n, width, z) {
        z = z || '0';
        n = n + '';
        return n.length >= width ? n : new Array(width - n.length + 1).join(z) + n;
    }
}

function removeNoteFromHTML(index)
{
    $("#notes li.note[data-index=" + index + "]").remove();
}

function setAddnotetimeSpan(text)
{
    if(text.length == 0)
    {
        $editnotetimespan.html('&nbsp;');
    }
    else
    {
        $editnotetimespan.text(text);
    }
}

function editNoteTimeSpan()
{
    $editnotetimetxt.val($editnotetimespan.text());
    $editnotetime.toggle();
    $editnotetimetxt.focus();
}

function endEditNoteTimeSpan()
{
    var val = jQuery.trim($editnotetimetxt.val());
    var timeParts = val.split(':');
    var time = 0;
    var fail = false;

    if(timeParts.length != 3)
    {
        fail = true;
    }

    for (var i = 0; i < timeParts.length; i++)
    {
        timeParts[i] = parseInt(timeParts[i], 10);

        if(Number.isNaN(timeParts[i]))
        {
            fail = true;
            break;
        }

        time += timeParts[i] * Math.max(((timeParts.length - i - 1) * 60), 1);
    }

    if(!fail)
    {
        inNoteTime = time;
        setAddnotetimeSpan(getHumanTime(inNoteTime));
    }

    $editnotetime.toggle();
}

function resetNoteTimespan()
{
    $editnotetimespan.show();
    $editnotetimetxt.hide();
}

// webplayer.currentTime does not work in the flash-version of mediaelement.js
// so we have to squeeze the current time out of the HTML element which contains it..
function getCurrentTime()
{
    var rawTime = $('.podlovewebplayer_wrapper .mejs-currenttime').text().split(':');
    var time = 0;
    // hours are optional.. so here comes the magic!
    for(var i = rawTime.length - 1; i >= 0; i--)
    {
        time += parseInt(rawTime[i], 10) * Math.pow(60, rawTime.length - i - 1);
    }
    return time;
}

function getNotes()
{
    return doc.at("notes").get();
}
</script>
