<% layout('../layout.ejs') %>
<% block('title', 'Create Document') -%>

<% script('js/jquery-queryParser.min.js') %>

<h4>Hi Podcaster!</h4>
<p>
Please enter a docname (could be <code id="docname-example"></code>) and links to your media-files. This formular will
try to guess the other URLs once you entered the <code>ogg</code>-URL, if a guess is wrong just correct the URL in the according textbox.
Please note that <code>ogg</code> is supported in all browsers except for Internet Explorer, which needs <code>mp3</code>.<br>
Unsupported browsers will fall back to flash-playback which has fewer features than the HTML5-Version of Asyncnoter.
</p>
<hr>
<div class="alert alert-error hidden" id="error"></div>
<form id="form" method="post">
    <div class="control-group">
        <label class="control-label" for="docname">Docname:</label>
        <div class="controls">
            <input type="text" id="docname" name="docname">
        </div>
    </div>
    <div id="browsers">
        <span>Supported browsers:</span>
        <br>
    </div>
    <button id="submit" class="btn btn-success" disabled="disabled">Create Document</button>
</form>

<script>
var podcasts =
[
    "mobilemacs",
    "wrint",
    "wikigeeks",
    "cre",
    "chaosradio",
    "sendungsbewusstsein",
    "einschlafen",
    "schallrauch"
];

var podcast = podcasts[getRandomInt(0, podcasts.length - 1)];
var episode = getRandomInt(0, 255) + "";
episode = new Array(3 - episode.length + 1).join('0') + episode;

var docname = podcast + "-" + episode;

$('#docname-example').text(docname);

function getRandomInt(min, max)
{
    return Math.floor(Math.random() * (max - min + 1)) + min;
}
</script>

<script>
var formats = [ "ogg", "mp3" ];
var browsers = [ "chrome", "firefox", "opera", "safari", "ie" ];
var support =
{
    "ogg":
    [
        browsers.indexOf("chrome"),
        browsers.indexOf("firefox"),
        browsers.indexOf("opera"),
        browsers.indexOf("safari")
    ],
    "mp3":
    [
        browsers.indexOf("chrome"),
        browsers.indexOf("ie"),
        browsers.indexOf("safari")
    ]
};
var givenSupport = {};
var validMediafiles = {};
var labelTimeout;

for(var format in formats)
{
    format = formats[format];
    addFormat(format);
}

for(var i = 0; i < browsers.length; i++)
{
    var $div = $("<div class='browser'>");
    $div.attr("data-browser", i);
    $div.css("background-position", (i * -47) + "px 0px");
    $('#browsers').append($div);

    givenSupport[i] = {};
}

function addFormat(format)
{
    var $group = $('<div>').addClass('control-group').addClass('format');
    var $label = $('<label>').addClass('control-label');
    var $txt = $('<input type="text">');
    var $status = $('<span>').addClass('status');

    $group.attr('id', 'format-' + format);
    $group.attr('data-format', format);

    $label.text(format + ":");

    $txt.attr('name', "formats[" + format + "]");

    $status.append($('<span>').addClass('fail hidden').html('&#10007;'));
    $status.append($('<span>').addClass('success hidden').html('&#10003;'));
    $status.append($('<span>').addClass('statustext'));

    $group.append($label);
    $group.append($('<div>').addClass('controls').append($txt).append($status));

    $('#browsers').before($group);
}

var $mainFormat = $('#format-' + formats[0] + ' input');
var $formats = $('div.format');

$mainFormat.on('input',
        function ()
        {
            var url = $mainFormat.val();
            url = url.slice(0, url.length - 3);

            $formats.each(
                    function (i, format)
                    {
                        var $format = $(format);
                        var $txt = $format.find('input');
                        var format = $format.data('format');

                        if(format == formats[0])
                            return;
                        if($txt.val().length != 0 && $txt.val() != $txt.attr('data-old'))
                            return;

                        var text = (url.length < format.length) ? "" : (url + format);
                        $txt.val(text);
                        $txt.attr('data-old', $txt.val());
                    }
            );
        }
);

$formats.on('input',
    function ()
    {
        clearTimeout(labelTimeout);
        labelTimeout = setTimeout(updateLabels, 1500);
    }
)

function updateLabels()
{
    $formats.each(
            function (i, format)
            {
                var $format = $(format);
                var $txt = $format.find('input');
                var file = $txt.val();
                var format = $format.data('format');

                $.getJSON('/createasync/checkstatus?url=' + encodeURIComponent(file),
                    function (data)
                    {
                        var fail = data.result == "error";

                        if(fail)
                        {
                            $format.find('.fail').removeClass('hidden');
                            $format.find('.success').addClass('hidden');
                            delete validMediafiles[format];
                        }
                        else
                        {
                            $format.find('.fail').addClass('hidden');
                            $format.find('.success').removeClass('hidden');
                            validMediafiles[format] = true;
                        }

                        $('#submit').attr('disabled', Object.keys(validMediafiles).length == 0 ? "disabled" : null);

                        var statustext = !!data.statusCode ? "(" + data.statusCode + ", " + data.statusText + ")": "";
                        var supported = support[format];

                        for (var brow in supported)
                        {
                            brow = supported[brow];

                            if(fail)
                                delete givenSupport[brow][format];
                            else
                                givenSupport[brow][format] = true;
                        }

                        for (var brow = 0; brow < browsers.length; brow++)
                        {
                            var $browser = $('.browser[data-browser=' + brow + ']');

                            if(Object.keys(givenSupport[brow]).length > 0)
                                $browser.addClass("valid");
                            else
                                $browser.removeClass("valid");
                        }

                        $format.find('.statustext').text(statustext);
                    }
                )
            }
    );
}
</script>

<script>
var error = $.getQuery().error;
var values = $.getQuery().values;

if(error)
{
    values = JSON.parse(values);

    switch(error)
    {
        case "docname":
            $('#docname').parents(".control-group:first").addClass("error");
            break;
        case "media":
            $('#error').text("You did not provide a single valid media file.");
            $('#error').removeClass("hidden");
            break;
        case "other":
            $('#error').text("There was an error when creating your document. Please contact an admin.");
            $('#error').removeClass("hidden");
            break;
    }

    for(var v in values)
    {
        if(v.indexOf("format-") == 0)
            $('input[name="formats[' + v.substr(7) + ']"]').val(values[v]);
        else
            $('#' + v).val(values[v]);
    }

    updateLabels();
}
</script>
